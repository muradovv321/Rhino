apply plugin: 'com.android.application'

apply plugin: 'io.fabric'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "app.ogasimli.remoter"
        minSdkVersion 19
        targetSdkVersion 28
        multiDexEnabled true
        versionCode rootProject.versionCode
        versionName "$rootProject.versionName"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty("AndroidProject.signing")
                    && new File(project.property("AndroidProject.signing").toString()).exists()) {
                Properties props = new Properties()
                def propFile = new File(project.property("AndroidProject.signing").toString())
                if (propFile.canRead()) {
                    props.load(new FileInputStream(propFile))
                    if (props != null && props.containsKey('STORE_FILE') &&
                            props.containsKey('KEY_ALIAS') &&
                            props.containsKey('STORE_PASSWORD') &&
                            props.containsKey('KEY_PASSWORD')) {
                        storeFile = file(props['STORE_FILE'])
                        keyAlias = props['KEY_ALIAS']
                        storePassword = props['STORE_PASSWORD']
                        keyPassword = props['KEY_PASSWORD']
                    } else {
                        println 'keystore.properties found but some entries are missing'
                        signingConfig = null
                    }
                } else {
                    println 'keystore.properties file not found'
                    signingConfig = null
                }
            }
        }
    }
    buildTypes {
        debug {
            versionNameSuffix = '-d'
            applicationIdSuffix '.debug'
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

androidExtensions {
    experimental = true
}

ext {
    junitVersion = '4.12'
    runnerVersion = '1.1.0-alpha3'
    rulesVersion = '1.1.0-alpha'
    espressoVersion = '3.1.0-alpha3'
    ankoVersion = '0.10.5'
    androidXVersion = '1.0.0-beta01'
    lifecycleVersion = '2.0.0-beta01'
    daggerVersion = '2.16'
    roomVersion = '2.0.0-beta01'
    retrofitVersion = '2.3.0'
    glideVersion = '4.8.0-SNAPSHOT'
    okhttpVersion = '3.9.1'
    leakCanaryVersion = '1.5.4'
}

dependencies {

    // Local libraries
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Dependencies for local unit tests
    testImplementation "junit:junit:$junitVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test:rules:$rulesVersion"

    // Espresso UI Testing dependencies.
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
//    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    // Multidex support
    implementation 'androidx.multidex:multidex:2.0.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // Kotlin Anko
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"
    implementation "org.jetbrains.anko:anko-support-v4-commons:$ankoVersion"

    // AndroidX
    implementation "androidx.legacy:legacy-support-v4:$androidXVersion"
    implementation "androidx.appcompat:appcompat:$androidXVersion"
    implementation "androidx.cardview:cardview:$androidXVersion"
    implementation "com.google.android.material:material:$androidXVersion"
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-alpha1"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycleVersion"

    // Firebase Crashlytics
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'

    // Dagger 2
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Room ORM
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // RxJava/RxAndroid
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glideVersion"
    implementation("com.github.bumptech.glide:recyclerview-integration:$glideVersion") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // GSON
    implementation 'com.google.code.gson:gson:2.8.2'

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.0'

    // TextDrawable
    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'

    // ShimmerLayout
    implementation 'io.supercharge:shimmerlayout:2.1.0'

    //Joda-Time
    implementation 'joda-time:joda-time:2.10'

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Android-Debug-Database
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.3'
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary'
                    && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op',
                        version: details.requested.version)
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
